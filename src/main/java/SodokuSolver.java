/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class SodokuSolver {

  private static int[][] board =
    {{7, 8, 0, 4, 0, 0, 1, 2, 0}, {6, 0, 0, 0, 7, 5, 0, 0, 9}, {0, 0, 0, 6, 0, 1, 0, 7, 8},
        {0, 0, 7, 0, 4, 0, 2, 6, 0}, {0, 0, 1, 0, 5, 0, 9, 3, 0}, {9, 0, 4, 0, 6, 0, 0, 0, 5},
        {0, 7, 0, 3, 0, 0, 0, 1, 2}, {1, 2, 0, 0, 0, 7, 4, 0, 0}, {0, 4, 9, 2, 0, 6, 0, 0, 7}};


  private static boolean solve(int[][] board) {
    int[] pos;
    if (findEmpty(board) == null) {
      return true;
    } else {
      pos = findEmpty(board);
    }

    // backTracking Algorithm
    for (int sol = 1; sol < 10; sol++) {
      if (isValid(board, sol, pos)) {
        board[pos[0]][pos[1]] = sol;
        printBoard(board);
        if (solve(board)) {
          return true;
        }
        board[pos[0]][pos[1]] = 0;
      }
    }

    return false;
  }


  private static boolean isValid(int[][] board, int solution, int[] pos) {
    // check vertical
    for (int i = 0; i < board.length; i++) {
      if (board[i][pos[1]] == solution && i != pos[0]) {
        return false;
      }
    }
    // check horizontal
    for (int j = 0; j < board.length; j++) {
      if (board[pos[0]][j] == solution && j != pos[1]) {
        return false;
      }
    }

    int hboxPos = pos[1] == 0 ? 0 : (int) Math.floor((double) pos[1] / 3);
    int vboxPos = pos[0] == 0 ? 0 : (int) Math.floor((double) pos[0] / 3);
    for (int i = vboxPos * 3; i < vboxPos * 3 + 3; i++) {
      for (int j = hboxPos * 3; j < hboxPos * 3 + 3; j++) {
        if (board[i][j] == solution && (i != pos[0] && j != pos[1])) {
          return false;
        }
      }
    }
    // check box

    return true;
  }



  private static int[] findEmpty(int[][] board) {
    for (int i = 0; i < board.length; i++) {
      for (int j = 0; j < board[i].length; j++) {
        if (board[i][j] == 0) {
          int[] pos = {i, j};
          return pos;
        }
      }
    }
    return null;
  }

  private static void printBoard(int[][] board) {

    for (int i = 0; i < board.length; i++) {
      for (int j = 0; j < board[i].length; j++) {
        System.out.print(" " + board[i][j]);
        if ((j + 1) % 3 == 0 && j != board[i].length - 1) {
          System.out.print(" |");
        }

      }
      if ((i + 1) % 3 == 0 && i != board.length - 1) {
        System.out.println("\n-----------------------");
      } else {
        System.out.print("\n");
      }
    }
  }

  public static void main(String[] agrs) {
    int[] pos = {0, 2};
    printBoard(board);
    System.out.println(isValid(board, 5, pos));
    solve(board);
    printBoard(board);
    System.out.println(Math.ceil((double) 3 / 3));

  }
}
